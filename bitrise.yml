---
  format_version: '8'
  default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
  project_type: react-native
  workflows:
    deploy-android:
      description: >
        ## Configure Android part of the deploy workflow
  
  
        To generate a signed APK:
  
  
        1. Open the **Workflow** tab of your project on Bitrise.io
  
        1. Add **Sign APK step right after Android Build step**
  
        1. Click on **Code Signing** tab
  
        1. Find the **ANDROID KEYSTORE FILE** section
  
        1. Click or drop your file on the upload file field
  
        1. Fill the displayed 3 input fields:
  
        1. **Keystore password**
  
        1. **Keystore alias**
  
        1. **Private key password**
  
        1. Click on **[Save metadata]** button
  
  
        That's it! From now on, **Sign APK** step will receive your uploaded
        files.
  
  
        ## Configure iOS part of the deploy workflow
  
  
        To generate IPA:
  
  
        1. Open the **Workflow** tab of your project on Bitrise.io
  
        1. Click on **Code Signing** tab
  
        1. Find the **PROVISIONING PROFILE** section
  
        1. Click or drop your file on the upload file field
  
        1. Find the **CODE SIGNING IDENTITY** section
  
        1. Click or drop your file on the upload file field
  
        1. Click on **Workflows** tab
  
        1. Select deploy workflow
  
        1. Select **Xcode Archive & Export for iOS** step
  
        1. Open **Force Build Settings** input group
  
        1. Specify codesign settings
  
        Set **Force code signing with Development Team**, **Force code signing
        with Code Signing Identity**  
  
        and **Force code signing with Provisioning Profile** inputs regarding to
        the uploaded codesigning files
  
        1. Specify manual codesign style
  
        If the codesigning files, are generated manually on the Apple Developer
        Portal,  
  
        you need to explicitly specify to use manual coedsign settings  
  
        (as ejected rn projects have xcode managed codesigning turned on).  
  
        To do so, add 'CODE_SIGN_STYLE="Manual"' to 'Additional options for
        xcodebuild call' input
  
  
        ## To run this workflow
  
  
        If you want to run this workflow manually:
  
  
        1. Open the app's build list page
  
        2. Click on **[Start/Schedule a Build]** button
  
        3. Select **deploy** in **Workflow** dropdown input
  
        4. Click **[Start Build]** button
  
  
        Or if you need this workflow to be started by a GIT event:
  
  
        1. Click on **Triggers** tab
  
        2. Setup your desired event (push/tag/pull) and select **deploy** workflow
  
        3. Click on **[Done]** and then **[Save]** buttons
  
  
        The next change in your repository that matches any of your trigger map
        event will start **deploy** workflow.
      steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@4: {}
      - npm@1:
          inputs:
          - command: install
          title: Install node packages
      - install-missing-android-tools@2:
          inputs:
          - gradlew_path: $PROJECT_LOCATION/gradlew
      - npm@1:
          inputs:
          - command: 'run android:assembleRelease'
          title: Run assembleRelease
      - sign-apk@1:
          inputs:
          - verbose_log: 'true'
          - android_app: $ANDROID_UNSIGNED_APK_PATH
      - google-play-deploy@3.1:
          inputs:
          - package_name: $PACKAGE_NAME
          - app_path: $BITRISE_APK_PATH
          - track: internal
          - service_account_json_key_path: $BITRISEIO_PLAY_STORE_CRED_URL
      before_run: []
      after_run: []
    deploy-ios:
      steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
          inputs:
          - verbose: 'true'
      - git-clone@4: {}
      - certificate-and-profile-installer@1: {}
      - npm@1:
          inputs:
          - command: install
      - cocoapods-install@1:
          inputs:
          - podfile_path: ios/Podfile
      - xcode-archive@2:
          inputs:
          - export_method: app-store
          - upload_bitcode: 'no'
          - team_id: D28UQ2NTD7
          - configuration: Release
      - deploy-to-itunesconnect-application-loader@0.11:
          inputs:
          - password: $APP_STORE_PASS
          - itunescon_user: $APP_STORE_UNSERNAME
      before_run: []
      after_run: []
      meta:
        bitrise.io:
          stack: osx-xcode-11.3.x
  app:
    envs:
    - opts:
        is_expand: false
      PROJECT_LOCATION: android
    - opts:
        is_expand: false
      MODULE: app
    - opts:
        is_expand: false
      VARIANT: ''
    - opts:
        is_expand: false
      BITRISE_PROJECT_PATH: ios/master_mind.xcworkspace
    - opts:
        is_expand: false
      BITRISE_SCHEME: master_mind
    - opts:
        is_expand: false
      BITRISE_EXPORT_METHOD: app-store
    - opts:
        is_expand: false
      ANDROID_UNSIGNED_APK_PATH: android/app/build/outputs/apk/release/app-release.apk
    - opts:
        is_expand: false
      PACKAGE_NAME: com.dataquest.mastermind